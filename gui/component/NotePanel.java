/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.component;

import connector.catchObject;
import connector.miniObject;
import java.awt.Component;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author Prezes
 */
public class NotePanel extends javax.swing.JPanel {

    /**
     * Creates new form NotePanel
     */
    public NotePanel(catchObject object, MainFrame parent) {
        this.note = object;
        this.parent = parent;
        fillNoteText();
        initComponents();
        createTasksPanel();
        createCommentsPanel();
        addNotesBottomPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        noteCheckBox = new javax.swing.JCheckBox();
        dateText = new javax.swing.JTextField();
        notePane = new javax.swing.JScrollPane();
        noteText = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        tasksHeaderPanel = new javax.swing.JPanel();
        checkedTasksCheckBox = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 153, 153));
        setPreferredSize(new java.awt.Dimension(700, 125));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        headerPanel.setBackground(getBackground());
        headerPanel.setPreferredSize(new java.awt.Dimension(769, 39));
        headerPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                headerPanelMouseClicked(evt);
            }
        });

        noteCheckBox.setBackground(getBackground());
        noteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteCheckBoxActionPerformed(evt);
            }
        });

        dateText.setEditable(false);
        dateText.setBackground(getBackground());
        dateText.setText("data");
        dateText.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteCheckBox)
                .addGap(18, 18, 18)
                .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(598, Short.MAX_VALUE))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteCheckBox))
                .addContainerGap())
        );

        add(headerPanel);

        noteText.setColumns(20);
        noteText.setRows(5);
        notePane.setViewportView(noteText);

        add(notePane);

        tasksHeaderPanel.setBackground(new java.awt.Color(51, 255, 255));
        tasksHeaderPanel.setPreferredSize(new java.awt.Dimension(700, 20));
        tasksHeaderPanel.setVisible(false);

        checkedTasksCheckBox.setEditable(false);
        checkedTasksCheckBox.setBackground(tasksHeaderPanel.getBackground());
        checkedTasksCheckBox.setText("zaznaczone zadania: ");
        checkedTasksCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout tasksHeaderPanelLayout = new javax.swing.GroupLayout(tasksHeaderPanel);
        tasksHeaderPanel.setLayout(tasksHeaderPanelLayout);
        tasksHeaderPanelLayout.setHorizontalGroup(
            tasksHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksHeaderPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(checkedTasksCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(475, Short.MAX_VALUE))
        );
        tasksHeaderPanelLayout.setVerticalGroup(
            tasksHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tasksHeaderPanelLayout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(checkedTasksCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tasksHeaderPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(tasksHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void noteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noteCheckBoxActionPerformed

    private void headerPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerPanelMouseClicked
        expandCollapse(!expanded);
    }//GEN-LAST:event_headerPanelMouseClicked

    private void createTasksPanel() {
        taskPanels.clear();
        for (catchObject task: parent.getTasksFromNote(note.getId())) {
            TaskPanel taskPanel = new TaskPanel(task);
            add(taskPanel);
            taskPanel.setVisible(false); 
            taskPanels.add(taskPanel);
        }
        
    }
    
    private void createCommentsPanel() {
        commentPanels.clear();
        for (catchObject comment: parent.getCommentsFromNote(note.getId())) {
            CommentsPanel commentPanel = new CommentsPanel(comment);
            add(commentPanel);
            commentPanel.setVisible(false); 
            commentPanels.clear();
        }
    }
    
    private void addNotesBottomPanel() {
        notesBottomPanel = new NotesBottomPanel();
        add(notesBottomPanel);
        notesBottomPanel.setVisible(false);

    }
    
    public void expandCollapse(boolean expandCollapse){
        tasksHeaderPanel.setVisible(expandCollapse);
        for (TaskPanel taskPanel : taskPanels) {
            taskPanel.setVisible(expandCollapse);
        }
        for (CommentsPanel commentsPanel : commentPanels) {
            commentsPanel.setVisible(expandCollapse);
        }
        notesBottomPanel.setVisible(expandCollapse);
        this.update(getGraphics());
        parent.pack();
        expanded = expandCollapse;
    }
    
    public void refreshHeader() {
        noteText.setText(note.getText());
        for (Component c : this.getComponents()) {
            if (c instanceof TaskPanel || c instanceof CommentsPanel 
                    || c instanceof NotesBottomPanel) {
                this.remove(c);
            }
        }
        createTasksPanel();
        createCommentsPanel();
        addNotesBottomPanel();
        
        this.validateTree();
        parent.pack();
        this.update(this.getGraphics());
    }
    
    public void fillNoteText() {
        noteText.setText(note.getText());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField checkedTasksCheckBox;
    private javax.swing.JTextField dateText;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox noteCheckBox;
    private javax.swing.JScrollPane notePane;
    private javax.swing.JTextArea noteText;
    private javax.swing.JPanel tasksHeaderPanel;
    // End of variables declaration//GEN-END:variables
    NotesBottomPanel notesBottomPanel;
    //CommentsPanel commentsPanel;
    List <TaskPanel> taskPanels = new LinkedList<>();
    List <CommentsPanel> commentPanels = new LinkedList<>();

    //List <String> taskPanels;
    boolean expanded = false;
    MainFrame parent;
    catchObject note;
    
}
